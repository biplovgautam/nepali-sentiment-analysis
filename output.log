nohup: ignoring input
ü§ñ Financial Sentiment Analysis Project
Understanding main.py vs run.py
======================================================================
DIFFERENCE BETWEEN main.py AND run.py
======================================================================

üìÑ main.py - The ML Pipeline Core:
   ‚Ä¢ Contains the complete machine learning pipeline
   ‚Ä¢ Handles data loading, preprocessing, training, evaluation
   ‚Ä¢ Command-line interface for ML operations
   ‚Ä¢ Advanced configuration and parameter tuning
   ‚Ä¢ Generates models, reports, and visualizations
   ‚Ä¢ Direct control over ML hyperparameters

   Usage examples:
   - python main.py                           # Run with defaults
   - python main.py --alpha 1.5 --max-features 5000
   - python main.py --config custom_config.json

üöÄ run.py - The Project Manager/Runner:
   ‚Ä¢ Easy-to-use wrapper script
   ‚Ä¢ Manages different project operations
   ‚Ä¢ Handles environment setup automatically
   ‚Ä¢ Provides simple commands for common tasks
   ‚Ä¢ Status checking and health monitoring
   ‚Ä¢ Web server management

   Usage examples:
   - python run.py --setup                   # Initial setup
   - python run.py --pipeline                # Run ML pipeline
   - python run.py --web                     # Start web server
   - python run.py --demo                    # Quick demo
   - python run.py --status                  # Check status

üîÑ Workflow Comparison:

   Direct ML Approach (main.py):
   1. python main.py --alpha 2.0 --vectorizer tfidf
   ‚ûú Runs ML pipeline with specific parameters

   Project Management Approach (run.py):
   1. python run.py --setup      # Set up environment
   2. python run.py --status     # Check readiness
   3. python run.py --pipeline   # Run the pipeline
   4. python run.py --web        # Start web interface

üí° When to use which:
   ‚Ä¢ Use main.py when:
     - You want direct control over ML parameters
     - Experimenting with different configurations
     - Integrating into other ML workflows
     - Need detailed ML pipeline control

   ‚Ä¢ Use run.py when:
     - First time setting up the project
     - Want simple, guided operations
     - Managing multiple project components
     - Need quick demos or status checks
======================================================================

üìÅ PROJECT STRUCTURE STATUS:
--------------------------------------------------
‚úÖ main.py                             (ML Pipeline Core)
‚úÖ run.py                              (Project Runner)
‚úÖ config.py                           (Configuration)
‚úÖ requirements.txt                    (Dependencies)
‚úÖ data/financial_sentiment.csv        (Dataset)
‚úÖ utils/loader.py                     (Data Loader)
‚úÖ utils/preprocess.py                 (Text Preprocessor)
‚úÖ utils/vectorizer.py                 (Feature Extractor)
‚úÖ utils/model.py                      (ML Model)
‚úÖ utils/evaluator.py                  (Evaluator)
‚úÖ manage.py                           (Django Manager)
‚úÖ sentiment_project/settings.py       (Django Settings)
‚úÖ sentiment_app/views.py              (Web Views)

üéØ USAGE GUIDE:
--------------------------------------------------
1. First-time setup:
   python run.py --setup

2. Check everything is ready:
   python run.py --status

3. Run the ML pipeline:
   python run.py --pipeline
   # OR for custom parameters:
   python main.py --alpha 1.5 --max-features 8000

4. Start the web interface:
   python run.py --web
   # Then visit http://127.0.0.1:8000/

5. Quick demo:
   python run.py --demo

======================================================================
‚ú® Project is ready to use!
Start with: python run.py --status
======================================================================
